type Post = record {
  id : text;
  status : PostStatus;
  share_count : nat64;
  hashtags : vec text;
  description : text;
  created_at : SystemTime;
  likes : vec principal;
  video_uid : text;
  view_stats : PostViewStatistics;
  creator_principal : principal;
};
type PostDetailsForFrontend = record {
  id : text;
  hashtags : vec text;
  like_count : nat64;
  description : text;
  total_view_count : nat64;
  created_at : SystemTime;
  video_uid : text;
  created_by_user_principal_id : principal;
  creator_principal : principal;
  liked_by_me : bool;
};
type PostDetailsFromFrontend = record {
  id : text;
  hashtags : vec text;
  description : text;
  video_uid : text;
  creator_principal : principal;
};
type PostStatus = variant {
  BannedForExplicitness;
  BannedDueToUserReporting;
  Uploaded;
  CheckingExplicitness;
  ReadyToView;
  Transcoding;
  Deleted;
};
type PostViewDetailsFromFrontend = variant {
  WatchedMultipleTimes : record {
    percentage_watched : nat8;
    watch_count : nat8;
  };
  WatchedPartially : record { percentage_watched : nat8 };
};
type PostViewStatistics = record {
  total_view_count : nat64;
  average_watch_percentage : nat8;
  threshold_view_count : nat64;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : UserPostServiceError };
type Result_1 = variant { Ok : Post; Err : UserPostServiceError };
type Result_2 = variant {
  Ok : PostDetailsForFrontend;
  Err : UserPostServiceError;
};
type Result_3 = variant { Ok : nat64; Err : UserPostServiceError };
type Result_4 = variant { Ok : bool; Err : UserPostServiceError };
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type UserPostServiceError = variant {
  DuplicatePostId;
  Unauthorized;
  CallError : record { RejectionCode; text };
  PostNotFound;
};
type UserPostServiceInitArgs = record { version : text };
service : (UserPostServiceInitArgs) -> {
  add_post : (PostDetailsFromFrontend) -> (Result);
  delete_post : (text) -> (Result);
  get_individual_post_details_by_id : (text) -> (Result_1) query;
  get_individual_post_details_by_id_for_user : (text, principal) -> (
      Result_2,
    ) query;
  get_posts_of_this_user_profile_with_pagination_cursor : (
      principal,
      nat64,
      nat64,
    ) -> (vec Post) query;
  get_version : () -> (text) query;
  update_post_add_view_details : (text, PostViewDetailsFromFrontend) -> (
      Result,
    );
  update_post_increment_share_count : (text) -> (Result_3);
  update_post_toggle_like_status_by_caller : (text) -> (Result_4);
}
