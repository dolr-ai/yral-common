type LikedPayload = record { post_id : text; by_user_principal : principal };
type NotificationData = record {
  created_at : SystemTime;
  notification_id : nat64;
  payload : NotificationType;
};
type NotificationStoreError = variant {
  Unauthorized;
  CallError : record { RejectionCode; text };
};
type NotificationStoreInitArgs = record { version : text };
type NotificationType = variant {
  Liked : LikedPayload;
  VideoUpload : VideoUploadPayload;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok; Err : NotificationStoreError };
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
type VideoUploadPayload = record { video_uid : text };
service : (NotificationStoreInitArgs) -> {
  add_notification : (principal, NotificationType) -> (Result);
  get_notification_panel_viewed : () -> (opt SystemTime) query;
  get_notifications : (nat64, nat64) -> (vec NotificationData) query;
  get_version : () -> (text) query;
  set_notification_panel_viewed : () -> (Result);
}