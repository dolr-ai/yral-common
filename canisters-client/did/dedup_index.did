type ListArgs = record { page : nat64; size : nat64 };
type ListError = variant { SizeNotAllowed; PageOutOfRange; WillOverflow };
type RemoveVideoIdArgs = record { video_hash : text; video_id : text };
type Result = variant {
  Ok : vec record { text; vec record { text; SystemTime } };
  Err : ListError;
};
type ServiceInitArgs = record { version : text };
type SystemTime = record {
  nanos_since_epoch : nat32;
  secs_since_epoch : nat64;
};
service : (ServiceInitArgs) -> {
  add_video_to_index : (text, record { text; SystemTime }) -> ();
  get_version : () -> (text) query;
  get_videos_for_hash : (text) -> (opt vec record { text; SystemTime }) query;
  is_duplicate : (text) -> (bool) query;
  list_hashes : (ListArgs) -> (Result) query;
  remove_video_id : (RemoveVideoIdArgs) -> (bool);
  unique_hash_count : () -> (nat64) query;
}
