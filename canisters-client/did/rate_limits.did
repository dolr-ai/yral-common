type GlobalRateLimitConfig = record {
  window_duration_seconds : nat64;
  max_requests_per_window_registered : nat64;
  max_requests_per_window_unregistered : nat64;
};
type PropertyRateLimitConfig = record {
  property_rate_limit_window_duration_seconds : opt nat64;
  window_duration_seconds : nat64;
  max_requests_per_window_registered : nat64;
  max_requests_per_property_all_users : opt nat64;
  property : text;
  max_requests_per_window_unregistered : nat64;
};
type RateLimitConfig = record {
  window_duration_seconds : nat64;
  max_requests_per_window : nat64;
};
type RateLimitResult = variant { Ok : text; Err : text };
type RateLimitStatus = record {
  "principal" : principal;
  window_start : nat64;
  is_limited : bool;
  request_count : nat64;
};
type RateLimitsInitArgs = record { version : text };
type Result = variant { Ok : VideoGenRequestKey; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : VideoGenRequestStatus; Err : text };
type VideoGenRequest = record {
  status : VideoGenRequestStatus;
  updated_at : nat64;
  payment_amount : opt text;
  model_name : text;
  created_at : nat64;
  prompt : text;
};
type VideoGenRequestKey = record { "principal" : principal; counter : nat64 };
type VideoGenRequestStatus = variant {
  Failed : text;
  Complete : text;
  Processing;
  Pending;
};
service : (RateLimitsInitArgs) -> {
  add_to_blacklist : (text) -> (RateLimitResult);
  check_rate_limit : (principal, text, bool) -> (RateLimitResult);
  clear_all_rate_limits : () -> (RateLimitResult);
  clear_blacklist : () -> (RateLimitResult);
  create_video_generation_request : (
      principal,
      text,
      text,
      text,
      bool,
      opt text,
    ) -> (Result);
  decrement_video_generation_counter : (VideoGenRequestKey, text) -> (Result_1);
  decrement_video_generation_counter_v1 : (VideoGenRequestKey, text) -> (
      Result_1,
    );
  get_blacklist : () -> (vec text) query;
  get_default_rate_limit_config : () -> (GlobalRateLimitConfig) query;
  get_principal_rate_limit_config : (principal, text) -> (
      opt RateLimitConfig,
    ) query;
  get_property_daily_usage : (text) -> (nat64) query;
  get_property_rate_limit_config : (text) -> (
      opt PropertyRateLimitConfig,
    ) query;
  get_property_rate_limit_configs : () -> (vec PropertyRateLimitConfig) query;
  get_rate_limit_status : (principal, text, bool) -> (opt RateLimitStatus);
  get_user_video_generation_requests : (principal, opt nat64, opt nat64) -> (
      vec record { VideoGenRequestKey; VideoGenRequest },
    ) query;
  get_version : () -> (text) query;
  get_video_generation_request : (VideoGenRequestKey) -> (
      opt VideoGenRequest,
    ) query;
  increment_request_count : (principal, text, bool) -> (RateLimitResult);
  increment_request_count_v1 : (principal, text, bool, bool, opt text) -> (
      RateLimitResult,
    );
  poll_video_generation_status : (VideoGenRequestKey) -> (Result_2) query;
  remove_from_blacklist : (text) -> (RateLimitResult);
  remove_property_rate_limit_config : (text) -> (RateLimitResult);
  reset_all_principal_rate_limits : (principal) -> (RateLimitResult);
  reset_property_daily_limit : (text) -> (RateLimitResult);
  reset_rate_limit : (principal, text) -> (RateLimitResult);
  set_principal_rate_limit : (principal, text, nat64, nat64) -> (
      RateLimitResult,
    );
  set_property_rate_limit_config : (
      text,
      nat64,
      nat64,
      nat64,
      opt nat64,
      opt nat64,
    ) -> (RateLimitResult);
  update_default_rate_limit_config : (nat64, nat64, nat64) -> (RateLimitResult);
  update_video_generation_status : (
      VideoGenRequestKey,
      VideoGenRequestStatus,
    ) -> (Result_1);
}
